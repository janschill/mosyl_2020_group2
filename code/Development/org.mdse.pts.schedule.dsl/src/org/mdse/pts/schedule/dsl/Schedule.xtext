grammar org.mdse.pts.schedule.dsl.Schedule hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://mdse.org/pts/network" as networkM
import "http://mdse.org/pts/depot" as depotM
import "http://mdse.org/pts/time" as timeM
import "http://mdse.org/pts/schedule"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

 
Schedule:
	"SCHEDULE" "FOR" networkReference=NetworkReference "WITH" depotReference+=DepotReference ("," depotReference+=DepotReference)* ":" 
	
	//("TRAIN" trainReference+=TrainReference //("," trainReference+=TrainReference)* 
	
	(routeReference+=Route)+
;

//Network
NetworkReference:
	(network=[networkM::Network|STRING] | network=[networkM::Network|ID])
;


//Depot  
DepotReference:
	(depot=[depotM::Depot|STRING] | depot=[depotM::Depot|ID])
;


//Train
TrainReference:
	(train=[depotM::Train|STRING] | train=[depotM::Train|ID])	
;

//Route
Route:
"TRAIN" (train=[depotM::Train|STRING] | train=[depotM::Train|ID])
"ON"
time+=STime
("AND" time+=STime)* ":"

//"START" "AT" start = [networkM::Station|STRING] "ON" "PLATFORM" platform+=Platform
//("DRIVE" "VIA" drive += [networkM::Leg|ID] ("," drive += [networkM::Leg])*)*
//("STOP" "AT" stop += [networkM::Station|STRING] "ON" "PLATFORM" platform+=Platform "FOR" stopTime+=INT "MIN")*
//"TERMINATE" "AT" terminate = [networkM::Station|STRING] "ON" "PLATFORM" platform+=Platform
"START" "AT" transits+=Transit
("DRIVE" "VIA" transits+=Transit)?
("STOP" "AT" transits+=Transit)*
"TERMINATE" "AT" transits+=Transit
;

Transit:
(leg=[networkM::Leg|STRING] | leg=[networkM::Leg|ID]) | (station=[networkM::Station|STRING] "ON" "PLATFORM" platform=Platform ("FOR" standingDuration=INT "MIN")?)
;

Platform:
	name=STRING
;

STime:
day+=Day ("," day+=Day)* "AT" hour+=INT":"minute+=INT ("AND" hour += INT":"minute += INT)*
;

enum Day returns timeM::Day:
 Monday = "Monday" | Tuesday = "Tuesday" | Wednesday = "Wednesday" | Thursday = "Thursday" | Friday = "Friday" | Saturday = "Saturday" | Sunday = "Sunday"
;

//TODO: Define syntax rules

terminal fragment LETTER:
	('a'..'z' | 'A'..'Z')
;

terminal fragment DIGIT:
	('0'..'9')
;

terminal ID:
	'^'?('_' | LETTER) ('_' | LETTER | DIGIT )*
;

terminal INT returns ecore::EInt:
	DIGIT+
;

terminal STRING:
	'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"'
;
 
terminal ML_COMMENT:
	'/*' -> '*/'
;

terminal SL_COMMENT:
	'//' !('\n'|'\r')* ('\r'? '\n')?
;

terminal WS:
	(' '|'\t'|'\r'|'\n')+
; 