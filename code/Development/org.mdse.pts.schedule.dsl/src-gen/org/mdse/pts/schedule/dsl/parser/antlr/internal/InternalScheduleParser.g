/*
 * generated by Xtext 2.21.0
 */
parser grammar InternalScheduleParser;

options {
	tokenVocab=InternalScheduleLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.mdse.pts.schedule.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.mdse.pts.schedule.dsl.services.ScheduleGrammarAccess;

}

@members {

 	private ScheduleGrammarAccess grammarAccess;

    public InternalScheduleParser(TokenStream input, ScheduleGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Schedule";
   	}

   	@Override
   	protected ScheduleGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSchedule
entryRuleSchedule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScheduleRule()); }
	iv_ruleSchedule=ruleSchedule
	{ $current=$iv_ruleSchedule.current; }
	EOF;

// Rule Schedule
ruleSchedule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Schedule
		{
			newLeafNode(otherlv_0, grammarAccess.getScheduleAccess().getScheduleKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScheduleAccess().getNetworkReferenceNetworkReferenceParserRuleCall_1_0());
				}
				lv_networkReference_1_0=ruleNetworkReference
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScheduleRule());
					}
					set(
						$current,
						"networkReference",
						lv_networkReference_1_0,
						"org.mdse.pts.schedule.dsl.Schedule.NetworkReference");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=With
		{
			newLeafNode(otherlv_2, grammarAccess.getScheduleAccess().getWithKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScheduleRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getScheduleAccess().getWithDepotDepotCrossReference_3_0());
				}
			)
		)
		otherlv_4=Colon
		{
			newLeafNode(otherlv_4, grammarAccess.getScheduleAccess().getColonKeyword_4());
		}
	)
;

// Entry rule entryRuleNetworkReference
entryRuleNetworkReference returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNetworkReferenceRule()); }
	iv_ruleNetworkReference=ruleNetworkReference
	{ $current=$iv_ruleNetworkReference.current; }
	EOF;

// Rule NetworkReference
ruleNetworkReference returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=For
		{
			newLeafNode(otherlv_0, grammarAccess.getNetworkReferenceAccess().getForKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNetworkReferenceRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getNetworkReferenceAccess().getForNetworkCrossReference_1_0());
				}
			)
		)
	)
;
