/*
 * generated by Xtext 2.21.0
 */
package org.mdse.pts.schedule.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ScheduleGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ScheduleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.Schedule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSCHEDULEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFORKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNetworkReferenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNetworkReferenceNetworkReferenceParserRuleCall_2_0 = (RuleCall)cNetworkReferenceAssignment_2.eContents().get(0);
		private final Keyword cWITHKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDepotReferenceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDepotReferenceDepotReferenceParserRuleCall_4_0 = (RuleCall)cDepotReferenceAssignment_4.eContents().get(0);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTRAINKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cTrainReferenceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cTrainReferenceTrainReferenceParserRuleCall_7_0 = (RuleCall)cTrainReferenceAssignment_7.eContents().get(0);
		
		//Schedule:
		//	"SCHEDULE" "FOR"
		//	networkReference=NetworkReference
		//	"WITH"
		//	depotReference+=DepotReference
		//	":"
		//	"TRAIN"
		//	trainReference+=TrainReference;
		@Override public ParserRule getRule() { return rule; }
		
		//"SCHEDULE" "FOR" networkReference=NetworkReference "WITH" depotReference+=DepotReference ":" "TRAIN"
		//trainReference+=TrainReference
		public Group getGroup() { return cGroup; }
		
		//"SCHEDULE"
		public Keyword getSCHEDULEKeyword_0() { return cSCHEDULEKeyword_0; }
		
		//"FOR"
		public Keyword getFORKeyword_1() { return cFORKeyword_1; }
		
		//networkReference=NetworkReference
		public Assignment getNetworkReferenceAssignment_2() { return cNetworkReferenceAssignment_2; }
		
		//NetworkReference
		public RuleCall getNetworkReferenceNetworkReferenceParserRuleCall_2_0() { return cNetworkReferenceNetworkReferenceParserRuleCall_2_0; }
		
		//"WITH"
		public Keyword getWITHKeyword_3() { return cWITHKeyword_3; }
		
		//depotReference+=DepotReference
		public Assignment getDepotReferenceAssignment_4() { return cDepotReferenceAssignment_4; }
		
		//DepotReference
		public RuleCall getDepotReferenceDepotReferenceParserRuleCall_4_0() { return cDepotReferenceDepotReferenceParserRuleCall_4_0; }
		
		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }
		
		//"TRAIN"
		public Keyword getTRAINKeyword_6() { return cTRAINKeyword_6; }
		
		//trainReference+=TrainReference
		public Assignment getTrainReferenceAssignment_7() { return cTrainReferenceAssignment_7; }
		
		//TrainReference
		public RuleCall getTrainReferenceTrainReferenceParserRuleCall_7_0() { return cTrainReferenceTrainReferenceParserRuleCall_7_0; }
	}
	public class NetworkReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.NetworkReference");
		private final Assignment cNetworkAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cNetworkNetworkCrossReference_0 = (CrossReference)cNetworkAssignment.eContents().get(0);
		private final RuleCall cNetworkNetworkIDTerminalRuleCall_0_1 = (RuleCall)cNetworkNetworkCrossReference_0.eContents().get(1);
		
		//NetworkReference:
		//	network=[networkM::Network];
		@Override public ParserRule getRule() { return rule; }
		
		//network=[networkM::Network]
		public Assignment getNetworkAssignment() { return cNetworkAssignment; }
		
		//[networkM::Network]
		public CrossReference getNetworkNetworkCrossReference_0() { return cNetworkNetworkCrossReference_0; }
		
		//ID
		public RuleCall getNetworkNetworkIDTerminalRuleCall_0_1() { return cNetworkNetworkIDTerminalRuleCall_0_1; }
	}
	public class DepotReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.DepotReference");
		private final Assignment cDepotAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDepotDepotCrossReference_0 = (CrossReference)cDepotAssignment.eContents().get(0);
		private final RuleCall cDepotDepotIDTerminalRuleCall_0_1 = (RuleCall)cDepotDepotCrossReference_0.eContents().get(1);
		
		//DepotReference:
		//	depot=[depotM::Depot];
		@Override public ParserRule getRule() { return rule; }
		
		//depot=[depotM::Depot]
		public Assignment getDepotAssignment() { return cDepotAssignment; }
		
		//[depotM::Depot]
		public CrossReference getDepotDepotCrossReference_0() { return cDepotDepotCrossReference_0; }
		
		//ID
		public RuleCall getDepotDepotIDTerminalRuleCall_0_1() { return cDepotDepotIDTerminalRuleCall_0_1; }
	}
	public class TrainReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.TrainReference");
		private final Assignment cTrainAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTrainTrainCrossReference_0 = (CrossReference)cTrainAssignment.eContents().get(0);
		private final RuleCall cTrainTrainIDTerminalRuleCall_0_1 = (RuleCall)cTrainTrainCrossReference_0.eContents().get(1);
		
		//TrainReference:
		//	train=[depotM::Train];
		@Override public ParserRule getRule() { return rule; }
		
		//train=[depotM::Train]
		public Assignment getTrainAssignment() { return cTrainAssignment; }
		
		//[depotM::Train]
		public CrossReference getTrainTrainCrossReference_0() { return cTrainTrainCrossReference_0; }
		
		//ID
		public RuleCall getTrainTrainIDTerminalRuleCall_0_1() { return cTrainTrainIDTerminalRuleCall_0_1; }
	}
	
	
	private final ScheduleElements pSchedule;
	private final NetworkReferenceElements pNetworkReference;
	private final DepotReferenceElements pDepotReference;
	private final TrainReferenceElements pTrainReference;
	private final TerminalRule tLETTER;
	private final TerminalRule tDIGIT;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public ScheduleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSchedule = new ScheduleElements();
		this.pNetworkReference = new NetworkReferenceElements();
		this.pDepotReference = new DepotReferenceElements();
		this.pTrainReference = new TrainReferenceElements();
		this.tLETTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.LETTER");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.DIGIT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.mdse.pts.schedule.dsl.Schedule.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.mdse.pts.schedule.dsl.Schedule".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Schedule:
	//	"SCHEDULE" "FOR"
	//	networkReference=NetworkReference
	//	"WITH"
	//	depotReference+=DepotReference
	//	":"
	//	"TRAIN"
	//	trainReference+=TrainReference;
	public ScheduleElements getScheduleAccess() {
		return pSchedule;
	}
	
	public ParserRule getScheduleRule() {
		return getScheduleAccess().getRule();
	}
	
	//NetworkReference:
	//	network=[networkM::Network];
	public NetworkReferenceElements getNetworkReferenceAccess() {
		return pNetworkReference;
	}
	
	public ParserRule getNetworkReferenceRule() {
		return getNetworkReferenceAccess().getRule();
	}
	
	//DepotReference:
	//	depot=[depotM::Depot];
	public DepotReferenceElements getDepotReferenceAccess() {
		return pDepotReference;
	}
	
	public ParserRule getDepotReferenceRule() {
		return getDepotReferenceAccess().getRule();
	}
	
	//TrainReference:
	//	train=[depotM::Train];
	public TrainReferenceElements getTrainReferenceAccess() {
		return pTrainReference;
	}
	
	public ParserRule getTrainReferenceRule() {
		return getTrainReferenceAccess().getRule();
	}
	
	//terminal fragment LETTER:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getLETTERRule() {
		return tLETTER;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal ID:
	//	'^'? ('_' | LETTER) ('_' | LETTER | DIGIT)*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	DIGIT+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
