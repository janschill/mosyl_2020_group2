/*
 * generated by Xtext 2.21.0
 */
package org.mdse.pts.schedule.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.mdse.pts.schedule.NetworkReference;
import org.mdse.pts.schedule.Schedule;
import org.mdse.pts.schedule.SchedulePackage;
import org.mdse.pts.schedule.dsl.services.ScheduleGrammarAccess;

@SuppressWarnings("all")
public class ScheduleSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ScheduleGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SchedulePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SchedulePackage.NETWORK_REFERENCE:
				sequence_NetworkReference(context, (NetworkReference) semanticObject); 
				return; 
			case SchedulePackage.SCHEDULE:
				sequence_Schedule(context, (Schedule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     NetworkReference returns NetworkReference
	 *
	 * Constraint:
	 *     for=[Network|ID]
	 */
	protected void sequence_NetworkReference(ISerializationContext context, NetworkReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SchedulePackage.Literals.NETWORK_REFERENCE__FOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SchedulePackage.Literals.NETWORK_REFERENCE__FOR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNetworkReferenceAccess().getForNetworkIDTerminalRuleCall_1_0_1(), semanticObject.eGet(SchedulePackage.Literals.NETWORK_REFERENCE__FOR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Schedule returns Schedule
	 *
	 * Constraint:
	 *     (networkReference=NetworkReference withDepot+=[Depot|ID])
	 */
	protected void sequence_Schedule(ISerializationContext context, Schedule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
