/*
 * generated by Xtext 2.21.0
 */
parser grammar InternalScheduleParser;

options {
	tokenVocab=InternalScheduleLexer;
	superClass=AbstractInternalContentAssistParser;
}

@header {
package org.mdse.pts.schedule.dsl.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.mdse.pts.schedule.dsl.services.ScheduleGrammarAccess;

}
@members {
	private ScheduleGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("FOR", "'FOR'");
		tokenNameToValue.put("WITH", "'WITH'");
		tokenNameToValue.put("TRAIN", "'TRAIN'");
		tokenNameToValue.put("SCHEDULE", "'SCHEDULE'");
	}

	public void setGrammarAccess(ScheduleGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleSchedule
entryRuleSchedule
:
{ before(grammarAccess.getScheduleRule()); }
	 ruleSchedule
{ after(grammarAccess.getScheduleRule()); } 
	 EOF 
;

// Rule Schedule
ruleSchedule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScheduleAccess().getGroup()); }
		(rule__Schedule__Group__0)
		{ after(grammarAccess.getScheduleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNetworkReference
entryRuleNetworkReference
:
{ before(grammarAccess.getNetworkReferenceRule()); }
	 ruleNetworkReference
{ after(grammarAccess.getNetworkReferenceRule()); } 
	 EOF 
;

// Rule NetworkReference
ruleNetworkReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNetworkReferenceAccess().getNetworkAssignment()); }
		(rule__NetworkReference__NetworkAssignment)
		{ after(grammarAccess.getNetworkReferenceAccess().getNetworkAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDepotReference
entryRuleDepotReference
:
{ before(grammarAccess.getDepotReferenceRule()); }
	 ruleDepotReference
{ after(grammarAccess.getDepotReferenceRule()); } 
	 EOF 
;

// Rule DepotReference
ruleDepotReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDepotReferenceAccess().getDepotAssignment()); }
		(rule__DepotReference__DepotAssignment)
		{ after(grammarAccess.getDepotReferenceAccess().getDepotAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTrainReference
entryRuleTrainReference
:
{ before(grammarAccess.getTrainReferenceRule()); }
	 ruleTrainReference
{ after(grammarAccess.getTrainReferenceRule()); } 
	 EOF 
;

// Rule TrainReference
ruleTrainReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrainReferenceAccess().getTrainAssignment()); }
		(rule__TrainReference__TrainAssignment)
		{ after(grammarAccess.getTrainReferenceAccess().getTrainAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__0__Impl
	rule__Schedule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getSCHEDULEKeyword_0()); }
	SCHEDULE
	{ after(grammarAccess.getScheduleAccess().getSCHEDULEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__1__Impl
	rule__Schedule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getFORKeyword_1()); }
	FOR
	{ after(grammarAccess.getScheduleAccess().getFORKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__2__Impl
	rule__Schedule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getNetworkReferenceAssignment_2()); }
	(rule__Schedule__NetworkReferenceAssignment_2)
	{ after(grammarAccess.getScheduleAccess().getNetworkReferenceAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__3__Impl
	rule__Schedule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getWITHKeyword_3()); }
	WITH
	{ after(grammarAccess.getScheduleAccess().getWITHKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__4__Impl
	rule__Schedule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getDepotReferenceAssignment_4()); }
	(rule__Schedule__DepotReferenceAssignment_4)
	{ after(grammarAccess.getScheduleAccess().getDepotReferenceAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__5__Impl
	rule__Schedule__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getColonKeyword_5()); }
	Colon
	{ after(grammarAccess.getScheduleAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__6__Impl
	rule__Schedule__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getTRAINKeyword_6()); }
	TRAIN
	{ after(grammarAccess.getScheduleAccess().getTRAINKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Schedule__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScheduleAccess().getTrainReferenceAssignment_7()); }
	(rule__Schedule__TrainReferenceAssignment_7)
	{ after(grammarAccess.getScheduleAccess().getTrainReferenceAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Schedule__NetworkReferenceAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScheduleAccess().getNetworkReferenceNetworkReferenceParserRuleCall_2_0()); }
		ruleNetworkReference
		{ after(grammarAccess.getScheduleAccess().getNetworkReferenceNetworkReferenceParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__DepotReferenceAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScheduleAccess().getDepotReferenceDepotReferenceParserRuleCall_4_0()); }
		ruleDepotReference
		{ after(grammarAccess.getScheduleAccess().getDepotReferenceDepotReferenceParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Schedule__TrainReferenceAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScheduleAccess().getTrainReferenceTrainReferenceParserRuleCall_7_0()); }
		ruleTrainReference
		{ after(grammarAccess.getScheduleAccess().getTrainReferenceTrainReferenceParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NetworkReference__NetworkAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNetworkReferenceAccess().getNetworkNetworkCrossReference_0()); }
		(
			{ before(grammarAccess.getNetworkReferenceAccess().getNetworkNetworkIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getNetworkReferenceAccess().getNetworkNetworkIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getNetworkReferenceAccess().getNetworkNetworkCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DepotReference__DepotAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDepotReferenceAccess().getDepotDepotCrossReference_0()); }
		(
			{ before(grammarAccess.getDepotReferenceAccess().getDepotDepotIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDepotReferenceAccess().getDepotDepotIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getDepotReferenceAccess().getDepotDepotCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrainReference__TrainAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrainReferenceAccess().getTrainTrainCrossReference_0()); }
		(
			{ before(grammarAccess.getTrainReferenceAccess().getTrainTrainIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTrainReferenceAccess().getTrainTrainIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getTrainReferenceAccess().getTrainTrainCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
